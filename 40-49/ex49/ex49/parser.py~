class ParserError(Exception):
    pass
    
class Sentence(object):
    
    def __init__(self, subj, verb, obj):
        # remember we take ('noun','princess') tuples and convert them
        self.subject = subj[1]
        self.verb = verb[1]
        self.object = obj[1]
        
        self.parser_error(Exception) = ParserError(Exception)

    def peek(self, word_list):
        if word_list:
            word = word_list[0]
            return word[0]
        else:
            return None
            
    def match(self, word_list, expecting):
        if word_list:
            word = word_list.pop(0)
            
            if word[0] == expecting:
                return word
            else:
                return None
        else:
            return None
            
    def skip(self, word_list, word_type):
        while peek(word_list) == word_type:
            match(word_list, word_type)
            
    def parse_verb(self, word_list):
        # take out all stop words in list
        skip(word_list, 'stop')
        
        if peek(word_list) == 'verb':
            # return's 'popped' verb tuples
            return match(word_list, 'verb')
        else:
            raise self.parser_error("Expected a verb next")
            
    def parse_object(self, word_list):
        skip(word_list, 'stop')
        next_word = peek(word_list)
        
        if next_word == 'noun':
            return match(word_list, 'noun')
        elif next_word == 'direction':
            return match(word_list, 'direction')
        else:
            raise self.parser_error("Expected a noun or direction next.")

    def parse_subject(self, word_list):
        skip(word_list, 'stop')
        start_word = peek(word_list)
        
        if start_word == 'noun':
            return match(word_list, 'noun')
        elif start_word == 'verb':
            return ('noun', 'player')
        else:
            raise self.parser_error("Expected a verb next.")
            
    def parse_sentence(self, word_list):
        subj = parse_subject(word_list)
        verb = parse_verb(word_list)
        obj = parse_object(word_list)
        
        return self.subj, self.verb, self.obj
        
parser = Parser()
